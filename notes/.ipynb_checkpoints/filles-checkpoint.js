{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3c4ed18e",
   "metadata": {
    "chatgpt_cell": "query",
    "chatgpt_language": "",
    "chatgpt_thread": ""
   },
   "source": [
    "// filename: src/App.js\n",
    "import React from \"react\";\n",
    "import TechTree from \"./TechTree\";\n",
    "import logo from './logo.svg';\n",
    "import './App.css';\n",
    "\n",
    "function App() {\n",
    "  return (\n",
    "    <div className=\"App\">\n",
    "      <header className=\"App-header\">\n",
    "        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n",
    "        <p>\n",
    "          Edit <code>src/App.js</code> and save to reload.\n",
    "        </p>\n",
    "        <a\n",
    "          className=\"App-link\"\n",
    "          href=\"https://reactjs.org\"\n",
    "          target=\"_blank\"\n",
    "          rel=\"noopener noreferrer\"\n",
    "        >\n",
    "          Learn React\n",
    "        </a>\n",
    "      </header>\n",
    "      <div className=\"App-body\">\n",
    "        <TechTree />\n",
    "      </div>\n",
    "    </div>\n",
    "  );\n",
    "}\n",
    "\n",
    "export default App;\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d54f6969",
   "metadata": {},
   "source": [
    "// file: src/index.js\n",
    "import React from 'react';\n",
    "import ReactDOM from 'react-dom/client';\n",
    "import './index.css';\n",
    "import App from './App';\n",
    "import reportWebVitals from './reportWebVitals';\n",
    "\n",
    "const root = ReactDOM.createRoot(document.getElementById('root'));\n",
    "root.render(\n",
    "  <React.StrictMode>\n",
    "    <App />\n",
    "  </React.StrictMode>\n",
    ");\n",
    "\n",
    "// If you want to start measuring performance in your app, pass a function\n",
    "// to log results (for example: reportWebVitals(console.log))\n",
    "// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n",
    "reportWebVitals();\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "226ea23f",
   "metadata": {},
   "source": [
    "// filename: src\\TechTree.js\n",
    "import React, { useEffect, useState } from \"react\";\n",
    "import { DataSet, Network } from \"vis-network\";\n",
    "import axios from \"axios\";\n",
    "\n",
    "const TechTree = () => {\n",
    "    const [nodes, setNodes] = useState([]);\n",
    "    const [edges, setEdges] = useState([]);,\n",
    "    useEffect(() => {\n",
    "      axios.get(\"http://localhost:8888/get-branches\")\n",
    "        .then((response) => {\n",
    "          setNodes(response.data.nodes);\n",
    "          setEdges(response.data.edges);\n",
    "        })\n",
    "        .catch((error) => {\n",
    "          console.error(error);\n",
    "        });\n",
    "    }, []);\n",
    "    useEffect(() => {\n",
    "      if (nodes.length > 0 && edges.length > 0) {\n",
    "        const data = {,\n",
    "          nodes: new DataSet(nodes),\n",
    "          edges: new DataSet(edges),\n",
    "        };\n",
    "        const container = document.getElementById(\"mynetwork\");\n",
    "        const options = {};\n",
    "        const network = new Network(container, data, options);\n",
    "      }\n",
    "    }, [nodes, edges]);\n",
    "    return <div id=\"mynetwork\" />;\n",
    "  };\n",
    "  export default TechTree;"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e8f9092",
   "metadata": {},
   "source": [
    "idk where the following goes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0635c78e",
   "metadata": {},
   "source": [
    "// filename: src/App.js\n",
    "import React from \"react\";\n",
    "import TechTree from \"./TechTree\";\n",
    "import logo from './logo.svg';\n",
    "import './App.css';\n",
    "\n",
    "function App() {\n",
    "  const nodes = [\n",
    "    { id: \"1\", label: \"Node 1\" },\n",
    "    { id: \"2\", label: \"Node 2\" },\n",
    "    { id: \"3\", label: \"Node 3\" },\n",
    "  ];\n",
    "\n",
    "  const edges = [\n",
    "    { from: \"1\", to: \"2\" },\n",
    "    { from: \"1\", to: \"3\" },\n",
    "  ];\n",
    "\n",
    "  return (\n",
    "    <div className=\"App\">\n",
    "      <TechTree nodes={nodes} edges={edges} />\n",
    "    </div>\n",
    "  );\n",
    "}\n",
    "\n",
    "export default App;\n",
    "\n",
    "\n",
    "UPDATE"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "09aec4d6",
   "metadata": {},
   "source": [
    "// filename: src\\TechTree.js\n",
    "import React, { useEffect, useState } from \"react\";\n",
    "import { DataSet, Network } from \"vis-network\";\n",
    "import axios from \"axios\";\n",
    "\n",
    "const TechTree = () => {\n",
    "    const [nodes, setNodes] = useState([]);\n",
    "    const [edges, setEdges] = useState([]);\n",
    "    useEffect(() => {\n",
    "      axios.get(\"http://localhost:8888/get-branches\")\n",
    "        .then((response) => {\n",
    "          setNodes(response.data.nodes);\n",
    "          setEdges(response.data.edges);\n",
    "        })\n",
    "        .catch((error) => {\n",
    "          console.error(error);\n",
    "        });\n",
    "    }, []);\n",
    "    useEffect(() => {\n",
    "      if (nodes.length > 0 && edges.length > 0) {\n",
    "        const data = {\n",
    "          nodes: new DataSet(nodes),\n",
    "          edges: new DataSet(edges),\n",
    "        };\n",
    "        const container = document.getElementById(\"mynetwork\");\n",
    "        const options = {};\n",
    "        const network = new Network(container, data, options);\n",
    "      }\n",
    "    }, [nodes, edges]);\n",
    "    return <div id=\"mynetwork\" />;\n",
    "  };\n",
    "  export default TechTree;\n",
    "    \n",
    "    NEEDS TO BE COMBINED WITH\n",
    "    \n",
    "    \n",
    "    useEffect(() => {\n",
    "    if (containerRef.current && nodes && edges) {\n",
    "      const data = {\n",
    "        nodes: new DataSet(nodes),\n",
    "        edges: new DataSet(edges),\n",
    "      };\n",
    "      const network = new Network(containerRef.current, data, {});\n",
    "\n",
    "      network.on(\"selectNode\", function (params) {\n",
    "        console.log(\"selected node\", params.nodes[0]);\n",
    "        // Here you can trigger an HTTP request to your notebook\n",
    "      });\n",
    "    }\n",
    "  }, [nodes, edges]);\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0590c8c6",
   "metadata": {},
   "source": [
    "//NEED HAALP WITH THIS:\n",
    "    Updating the Diagram Dynamically: You might want to update your diagram based on the responses from your Jupyter notebook. For this, you can store your nodes and edges in a state using the useState hook and update them when you get a response.\n",
    "jsx\n",
    "Copy code\n",
    "const [nodes, setNodes] = useState([]);\n",
    "const [edges, setEdges] = useState([]);\n",
    "\n",
    "useEffect(() => {\n",
    "  axios.get('http://localhost:8888/get-branches')\n",
    "  .then(function (response) {\n",
    "    setNodes(response.data.nodes);\n",
    "    setEdges(response.data.edges);\n",
    "  })\n",
    "  .catch(function (error) {\n",
    "    console.error(error);\n",
    "  });\n",
    "}, []);\n",
    "\n",
    "// WALK ME THROUGH THIS WHOLE PROCESS IN VS CODE USING NODE.JS WHERE APPLICABLE. KEEP EXPLAINATIONS TO ABSOLUTE MINIMAL. ASSUME I KNOW HOW TO ACHIEVE DEVELOPMENT. SHOW ME WORKING CODE AND EXPOSE ALL OF THE CODEPATH."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c832cce",
   "metadata": {},
   "source": [
    "##### chat\n",
    "Updating the Diagram Dynamically: You might want to update your diagram based on the responses from your Jupyter notebook. For this, you can store your nodes and edges in a state using the useState hook and update them when you get a response.\n",
    "jsx\n",
    "Copy code\n",
    "const [nodes, setNodes] = useState([]);\n",
    "const [edges, setEdges] = useState([]);\n",
    "\n",
    "useEffect(() => {\n",
    "  axios.get('http://localhost:8888/get-branches')\n",
    "  .then(function (response) {\n",
    "    setNodes(response.data.nodes);\n",
    "    setEdges(response.data.edges);\n",
    "  })\n",
    "  .catch(function (error) {\n",
    "    console.error(error);\n",
    "  });\n",
    "}, []);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "705479af",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e85b2923",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
